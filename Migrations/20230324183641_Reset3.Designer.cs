// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RpgFight.Data;

#nullable disable

namespace RpgFight.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230324183641_Reset3")]
    partial class Reset3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RpgFight.Models.Armor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("RpgFight.Models.BattleCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("HitPoint")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.HasIndex("ClassId");

                    b.HasIndex("SkillId");

                    b.HasIndex("WeaponId");

                    b.ToTable("BattleCharacters");
                });

            modelBuilder.Entity("RpgFight.Models.BattleCharacterEffect", b =>
                {
                    b.Property<int>("BattleCharacterId")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.HasKey("BattleCharacterId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("BattleCharacterEffects");
                });

            modelBuilder.Entity("RpgFight.Models.BattleEnemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterEnemyId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("HitPoint")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId");

                    b.HasIndex("CharacterEnemyId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SkillId");

                    b.HasIndex("WeaponId");

                    b.ToTable("BattleEnemies");
                });

            modelBuilder.Entity("RpgFight.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("HitPoint")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.HasIndex("WeaponId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("RpgFight.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Classs");
                });

            modelBuilder.Entity("RpgFight.Models.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Intensity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Self")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Effects");
                });

            modelBuilder.Entity("RpgFight.Models.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("HitPoint")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SkillId");

                    b.HasIndex("WeaponId");

                    b.ToTable("Enemies");
                });

            modelBuilder.Entity("RpgFight.Models.Joins.ArmorEffect", b =>
                {
                    b.Property<int>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.HasKey("ArmorId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("ArmorEffects");
                });

            modelBuilder.Entity("RpgFight.Models.Joins.BattleEnemyEffect", b =>
                {
                    b.Property<int>("BattleEnemyId")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.HasKey("BattleEnemyId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("BattleEnemyEffects");
                });

            modelBuilder.Entity("RpgFight.Models.Joins.ClassEffect", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.HasKey("ClassId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("ClassEffects");
                });

            modelBuilder.Entity("RpgFight.Models.Joins.SkillEffect", b =>
                {
                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.HasKey("SkillId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("SkillEffects");
                });

            modelBuilder.Entity("RpgFight.Models.Joins.WeaponEffect", b =>
                {
                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.HasKey("WeaponId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("WeaponEffects");
                });

            modelBuilder.Entity("RpgFight.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("RpgFight.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RpgFight.Models.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("RpgFight.Models.BattleCharacter", b =>
                {
                    b.HasOne("RpgFight.Models.Armor", "Armor")
                        .WithMany()
                        .HasForeignKey("ArmorId");

                    b.HasOne("RpgFight.Models.Character", "Character")
                        .WithOne("BattlCharacter")
                        .HasForeignKey("RpgFight.Models.BattleCharacter", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RpgFight.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("RpgFight.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.HasOne("RpgFight.Models.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId");

                    b.Navigation("Armor");

                    b.Navigation("Character");

                    b.Navigation("Class");

                    b.Navigation("Skill");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("RpgFight.Models.BattleCharacterEffect", b =>
                {
                    b.HasOne("RpgFight.Models.BattleCharacter", "BattleCharacter")
                        .WithMany("BattleCharacterEffects")
                        .HasForeignKey("BattleCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RpgFight.Models.Effect", "Effect")
                        .WithMany("BattleCharacterEffects")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BattleCharacter");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("RpgFight.Models.BattleEnemy", b =>
                {
                    b.HasOne("RpgFight.Models.Armor", "Armor")
                        .WithMany()
                        .HasForeignKey("ArmorId");

                    b.HasOne("RpgFight.Models.BattleCharacter", "CharacterEnemy")
                        .WithMany("Enemies")
                        .HasForeignKey("CharacterEnemyId");

                    b.HasOne("RpgFight.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("RpgFight.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.HasOne("RpgFight.Models.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId");

                    b.Navigation("Armor");

                    b.Navigation("CharacterEnemy");

                    b.Navigation("Class");

                    b.Navigation("Skill");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("RpgFight.Models.Character", b =>
                {
                    b.HasOne("RpgFight.Models.Armor", "Armor")
                        .WithMany("Characters")
                        .HasForeignKey("ArmorId");

                    b.HasOne("RpgFight.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("RpgFight.Models.Skill", "Skill")
                        .WithMany("Characters")
                        .HasForeignKey("SkillId");

                    b.HasOne("RpgFight.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId");

                    b.HasOne("RpgFight.Models.Weapon", "Weapon")
                        .WithMany("Characters")
                        .HasForeignKey("WeaponId");

                    b.Navigation("Armor");

                    b.Navigation("Class");

                    b.Navigation("Skill");

                    b.Navigation("User");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("RpgFight.Models.Enemy", b =>
                {
                    b.HasOne("RpgFight.Models.Armor", "Armor")
                        .WithMany()
                        .HasForeignKey("ArmorId");

                    b.HasOne("RpgFight.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("RpgFight.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId");

                    b.HasOne("RpgFight.Models.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId");

                    b.Navigation("Armor");

                    b.Navigation("Class");

                    b.Navigation("Skill");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("RpgFight.Models.Joins.ArmorEffect", b =>
                {
                    b.HasOne("RpgFight.Models.Armor", "Armor")
                        .WithMany("ArmorEffects")
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RpgFight.Models.Effect", "Effect")
                        .WithMany("ArmorEffects")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armor");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("RpgFight.Models.Joins.BattleEnemyEffect", b =>
                {
                    b.HasOne("RpgFight.Models.BattleEnemy", "BattleEnemy")
                        .WithMany("BattleEnemyEffects")
                        .HasForeignKey("BattleEnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RpgFight.Models.Effect", "Effect")
                        .WithMany("BattleEnemyEffects")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BattleEnemy");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("RpgFight.Models.Joins.ClassEffect", b =>
                {
                    b.HasOne("RpgFight.Models.Class", "Class")
                        .WithMany("ClassEffects")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RpgFight.Models.Effect", "Effect")
                        .WithMany("ClassEffects")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("RpgFight.Models.Joins.SkillEffect", b =>
                {
                    b.HasOne("RpgFight.Models.Effect", "Effect")
                        .WithMany("SkillEffects")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RpgFight.Models.Skill", "Skill")
                        .WithMany("SkillEffects")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("RpgFight.Models.Joins.WeaponEffect", b =>
                {
                    b.HasOne("RpgFight.Models.Effect", "Effect")
                        .WithMany("WeaponEffects")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RpgFight.Models.Weapon", "Weapon")
                        .WithMany("WeaponEffects")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("RpgFight.Models.Armor", b =>
                {
                    b.Navigation("ArmorEffects");

                    b.Navigation("Characters");
                });

            modelBuilder.Entity("RpgFight.Models.BattleCharacter", b =>
                {
                    b.Navigation("BattleCharacterEffects");

                    b.Navigation("Enemies");
                });

            modelBuilder.Entity("RpgFight.Models.BattleEnemy", b =>
                {
                    b.Navigation("BattleEnemyEffects");
                });

            modelBuilder.Entity("RpgFight.Models.Character", b =>
                {
                    b.Navigation("BattlCharacter");
                });

            modelBuilder.Entity("RpgFight.Models.Class", b =>
                {
                    b.Navigation("ClassEffects");
                });

            modelBuilder.Entity("RpgFight.Models.Effect", b =>
                {
                    b.Navigation("ArmorEffects");

                    b.Navigation("BattleCharacterEffects");

                    b.Navigation("BattleEnemyEffects");

                    b.Navigation("ClassEffects");

                    b.Navigation("SkillEffects");

                    b.Navigation("WeaponEffects");
                });

            modelBuilder.Entity("RpgFight.Models.Skill", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("SkillEffects");
                });

            modelBuilder.Entity("RpgFight.Models.User", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("RpgFight.Models.Weapon", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("WeaponEffects");
                });
#pragma warning restore 612, 618
        }
    }
}
